#!/usr/bin/env sh
. "$(dirname -- "$0")/husky.sh"

echo "üöÄ Pre-commit checks (from $(pwd))..."

# Find the git root directory (works from anywhere in monorepo)
GIT_ROOT=$(git rev-parse --show-toplevel)
echo "üìÅ Git root: $GIT_ROOT"

# 1. Check Node.js version
echo "1Ô∏è‚É£ Checking Node.js version..."
CURRENT_NODE=$(node --version)
EXPECTED_MAJOR="20"

# Extract major version (e.g., "v20.18.0" -> "20")
CURRENT_MAJOR=$(echo "$CURRENT_NODE" | sed 's/v\([0-9]*\)\..*/\1/')

echo "   Current Node.js: $CURRENT_NODE"

if [ "$CURRENT_MAJOR" != "$EXPECTED_MAJOR" ]; then
    echo ""
    echo "‚ùå Wrong Node.js version!"
    echo "   Expected: v${EXPECTED_MAJOR}.x.x (any Node.js 20)"
    echo "   Current:  $CURRENT_NODE"
    echo ""
    echo "   To fix this:"
    echo "   1. Run: nvm use 20"
    echo "   2. Or run: nvm use (uses .nvmrc)"
    echo "   3. Then try your commit again"
    echo ""
    exit 1
fi

echo "   ‚úÖ Node.js version OK"

# 2. package-lock.json sanity checks:
#    a) Ensure package-lock.json doesn‚Äôt have massive diffs ‚Äî usually a sign of incorrect Node.js/npm versions.
#    b) Make sure any package-lock.json change is paired with a meaningful change in its corresponding package.json.
echo "2Ô∏è‚É£ Checking package-lock.json changes..."

# Check if there are ANY staged files at all
STAGED_FILES=$(git diff --cached --name-only)
if [ -z "$STAGED_FILES" ]; then
    echo "   ‚ö†Ô∏è  No files are currently staged for commit"
    echo "   If you meant to commit changes, you might need to:"
    echo "   - git add <files>       (stage specific files)"
    echo "   - git add .             (stage all changes)"
    echo "   - git commit -a         (stage and commit all tracked files)"
    echo ""
    printf "   Continue with empty commit? (y/N): "

    # Read from /dev/tty to work properly in Git hooks
    if [ -t 0 ]; then
        read -r response
    else
        read -r response < /dev/tty
    fi

    if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
        echo "‚ùå Commit cancelled"
        exit 1
    fi
    echo "   Proceeding with empty commit..."
else
    echo "   Found staged files:"
    echo "$STAGED_FILES" | sed 's/^/     /'
fi

# Get all staged package-lock.json files
STAGED_LOCKFILES=$(echo "$STAGED_FILES" | grep "package-lock\.json$" || true)

# Get all unstaged package-lock.json files (might indicate forgotten staging)
UNSTAGED_LOCKFILES=$(git diff --name-only | grep "package-lock\.json$" || true)

# Check staged lockfiles
if [ -n "$STAGED_LOCKFILES" ]; then
    echo "   üìù Analyzing staged lockfiles:"
    echo "$STAGED_LOCKFILES" | sed 's/^/     /'

    # Check each staged lockfile
    for LOCKFILE in $STAGED_LOCKFILES; do
        # Count lines changed in this lockfile
        LOCK_CHANGES=$(git diff --cached --numstat "$LOCKFILE" | cut -f1)

        # Find corresponding package.json
        LOCKFILE_DIR=$(dirname "$LOCKFILE")
        PACKAGE_JSON="$LOCKFILE_DIR/package.json"

        # Check if corresponding package.json is also staged
        PKG_STAGED=$(echo "$STAGED_FILES" | grep "^$PACKAGE_JSON$" | wc -l)

        if [ -n "$LOCK_CHANGES" ] && [ "$LOCK_CHANGES" -gt 500 ] && [ "$PKG_STAGED" -eq 0 ]; then
            echo ""
            echo "‚ö†Ô∏è  WARNING: Large changes detected in $LOCKFILE"
            echo "   Lines changed: $LOCK_CHANGES"
            echo "   But corresponding $PACKAGE_JSON is not staged"
            echo ""
            echo "   This might indicate:"
            echo "   - Node.js version mismatch (current: $CURRENT_NODE)"
            echo "   - Lockfile corruption"
            echo "   - Missing package.json changes"
            echo "   - Forgotten to stage package.json"
            echo ""
            echo "   If you added/removed packages:"
            echo "   git add $PACKAGE_JSON"
            echo ""
            echo "   If you didn't change dependencies, this might be a Node.js version issue."
            echo ""
            printf "   Continue anyway? (y/N): "

            # Read from /dev/tty to work properly in Git hooks
            if [ -t 0 ]; then
                read -r response
            else
                read -r response < /dev/tty
            fi

            if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
                echo "‚ùå Commit cancelled"
                exit 1
            fi
        fi
    done
fi

# Check for unstaged lockfiles (might indicate forgotten staging)
if [ -n "$UNSTAGED_LOCKFILES" ]; then
    echo ""
    echo "   ‚ö†Ô∏è  Found unstaged package-lock.json changes:"
    echo "$UNSTAGED_LOCKFILES" | sed 's/^/     /'
    echo ""
    echo "   These files have been modified but are not staged for commit."
    echo "   This might indicate:"
    echo "   - You forgot to stage them: git add <file>"
    echo "   - Accidental changes from Node.js version mismatch"
    echo "   - Local development artifacts"
    echo ""

    # Count lines in unstaged changes
    for UNSTAGED_LOCKFILE in $UNSTAGED_LOCKFILES; do
        UNSTAGED_CHANGES=$(git diff --numstat "$UNSTAGED_LOCKFILE" | cut -f1)
        if [ -n "$UNSTAGED_CHANGES" ] && [ "$UNSTAGED_CHANGES" -gt 50 ]; then
            echo "   üìä Large unstaged changes in $UNSTAGED_LOCKFILE: $UNSTAGED_CHANGES lines"
        fi
    done

    echo ""
    printf "   Continue without staging these lockfiles? (y/N): "


    if [ -t 0 ]; then
        read -r response
    else
        read -r response < /dev/tty
    fi

    if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
        echo ""
        echo "   To stage the lockfiles:"
        for UNSTAGED_LOCKFILE in $UNSTAGED_LOCKFILES; do
            echo "   git add $UNSTAGED_LOCKFILE"
        done
        echo ""
        echo "   Or to discard the changes:"
        for UNSTAGED_LOCKFILE in $UNSTAGED_LOCKFILES; do
            echo "   git checkout $UNSTAGED_LOCKFILE"
        done
        echo ""
        echo "‚ùå Commit cancelled"
        exit 1
    fi
fi

# Summary for lockfiles
if [ -z "$STAGED_LOCKFILES" ] && [ -z "$UNSTAGED_LOCKFILES" ]; then
    echo "   No package-lock.json changes detected"
fi

echo "   ‚úÖ Package lockfile changes look good"

# 3. Run linting (only if we're in a directory with lint script)
echo "3Ô∏è‚É£ Checking for lint script..."

# Try to find nearest package.json with lint script
CURRENT_DIR=$(pwd)
LINT_DIR=""

# Check current directory and walk up to git root
while [ "$CURRENT_DIR" != "$GIT_ROOT" ] && [ "$CURRENT_DIR" != "/" ]; do
    if [ -f "$CURRENT_DIR/package.json" ] && grep -q '"lint"' "$CURRENT_DIR/package.json"; then
        LINT_DIR="$CURRENT_DIR"
        break
    fi
    CURRENT_DIR=$(dirname "$CURRENT_DIR")
done

# Check git root as well
if [ -z "$LINT_DIR" ] && [ -f "$GIT_ROOT/package.json" ] && grep -q '"lint"' "$GIT_ROOT/package.json"; then
    LINT_DIR="$GIT_ROOT"
fi

if [ -n "$LINT_DIR" ]; then
    echo "   Found lint script in: $LINT_DIR"
    echo "   Running linter..."
    cd "$LINT_DIR"
    npm run lint
    echo "   ‚úÖ Linting passed"
else
    echo "   No lint script found, skipping"
fi

echo ""
echo "‚úÖ All pre-commit checks passed!"
echo ""
