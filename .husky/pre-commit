echo "üöÄ Pre-commit checks (from $(pwd))..."

# Find the git root directory (works from anywhere in monorepo)
GIT_ROOT=$(git rev-parse --show-toplevel)
echo "üìÅ Git root: $GIT_ROOT"

# 1. Check Node.js version (get it from package.json engines)
echo "1Ô∏è‚É£ Checking Node.js version..."
CURRENT_NODE=$(node --version)

# Find package.json with engines field
ENGINES_FILE="$GIT_ROOT/package.json"

if [ -n "$ENGINES_FILE" ]; then
    echo "   üìã Using engines from: $ENGINES_FILE"

    # Extract Node version requirement from engines field
    NODE_REQUIREMENT=$(node -e "
        try {
            const pkg = require('$ENGINES_FILE');
            if (pkg.engines && pkg.engines.node) {
                console.log(pkg.engines.node);
            }
        } catch(e) {
            console.log('‚ö†Ô∏è  package.json with no engines field found')
            process.exit(1);
        }
    ")

    if [ $? -eq 0 ] && [ -n "$NODE_REQUIREMENT" ]; then
        echo "   üìù Required Node.js: $NODE_REQUIREMENT"
        echo "   üíª Current Node.js: $CURRENT_NODE"


        echo "   ‚ö†Ô∏è  check-node-version not found, using basic version check"
        # Extract major version for basic check
        # We areu using shell-based version checking

        CURRENT_MAJOR=$(echo "$CURRENT_NODE" | sed 's/v\([0-9]*\)\..*/\1/')
        REQUIRED_MAJOR=$(echo "$NODE_REQUIREMENT" | sed 's/[^0-9]*\([0-9]*\).*/\1/')

        if [ "$CURRENT_MAJOR" != "$REQUIRED_MAJOR" ]; then
            echo ""
            echo "‚ùå Node.js major version mismatch!"
            echo "   Required: Node $REQUIRED_MAJOR.x (from: $NODE_REQUIREMENT)"
            echo "   Current:  $CURRENT_NODE"
            echo ""
            echo "   To fix this:"
            echo "   1. Run: nvm use $REQUIRED_MAJOR"
            echo "   2. Or run: nvm install $REQUIRED_MAJOR"
            echo "   3. Then try your commit again"
            echo ""
            exit 1
        fi


        echo "   ‚úÖ Node.js version OK"
    else
        echo "   ‚ö†Ô∏è  Could not read engines.node field"
        exit 1
    fi
else
    echo "   ‚ö†Ô∏è  package.json with no engines field found"
    exit 1
fi

# 2. package-lock.json sanity checks:
#    a) Ensure package-lock.json doesn‚Äôt have massive diffs ‚Äî usually a sign of incorrect Node.js/npm versions.
#    b) Make sure any package-lock.json change is paired with a meaningful change in its corresponding package.json.
echo "2Ô∏è‚É£ Checking package-lock.json changes..."

# Check if there are ANY staged files at all
STAGED_FILES=$(git diff --cached --name-only)
if [ -z "$STAGED_FILES" ]; then
    echo "   ‚ö†Ô∏è  No files are currently staged for commit"
    echo "   If you meant to commit changes, you might need to:"
    echo "   - git add <files>       (stage specific files)"
    echo "   - git add .             (stage all changes)"
    echo "   - git commit -a         (stage and commit all tracked files)"
    echo ""
    printf "   Continue with empty commit? (y/N): "

    # Read from /dev/tty to work properly in Git hooks
    if [ -t 0 ]; then
        read -r response
    else
        read -r response < /dev/tty
    fi

    if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
        echo "‚ùå Commit cancelled"
        exit 1
    fi
    echo "   Proceeding with empty commit..."
else
    echo "   Found staged files:"
    echo "$STAGED_FILES" | sed 's/^/     /'
fi

# Get all staged package-lock.json files
STAGED_LOCKFILES=$(echo "$STAGED_FILES" | grep "package-lock\.json$" || true)

# Get all unstaged package-lock.json files (might indicate forgotten staging)
UNSTAGED_LOCKFILES=$(git diff --name-only | grep "package-lock\.json$" || true)

# Check staged lockfiles
if [ -n "$STAGED_LOCKFILES" ]; then
    echo "   üìù Analyzing staged lockfiles:"
    echo "$STAGED_LOCKFILES" | sed 's/^/     /'

    # Check each staged lockfile
    for LOCKFILE in $STAGED_LOCKFILES; do
        # Count lines changed in this lockfile
        LOCK_CHANGES=$(git diff --cached --numstat "$LOCKFILE" | cut -f1)

        # Find corresponding package.json
        LOCKFILE_DIR=$(dirname "$LOCKFILE")
        PACKAGE_JSON="$LOCKFILE_DIR/package.json"

        # Check if corresponding package.json is also staged
        PKG_STAGED=$(echo "$STAGED_FILES" | grep "^$PACKAGE_JSON$" | wc -l)

        if [ -n "$LOCK_CHANGES" ] && [ "$LOCK_CHANGES" -gt 500 ] && [ "$PKG_STAGED" -eq 0 ]; then
            echo ""
            echo "‚ö†Ô∏è  WARNING: Large changes detected in $LOCKFILE"
            echo "   Lines changed: $LOCK_CHANGES"
            echo "   But corresponding $PACKAGE_JSON is not staged"
            echo ""
            echo "   This might indicate:"
            echo "   - Node.js version mismatch (current: $CURRENT_NODE)"
            echo "   - Lockfile corruption"
            echo "   - Missing package.json changes"
            echo "   - Forgot to stage package.json"
            echo ""
            echo "   If you added/removed packages:"
            echo "   git add $PACKAGE_JSON"
            echo ""
            echo "   If you didn't change dependencies, this might be a Node.js version issue."
            echo ""
            printf "   Continue anyway? (y/N): "

            # Read from /dev/tty to work properly in Git hooks
            if [ -t 0 ]; then
                read -r response
            else
                read -r response < /dev/tty
            fi

            if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
                echo "‚ùå Commit cancelled"
                exit 1
            fi
        fi
    done
fi

# Check for unstaged lockfiles (might indicate forgotten staging)
if [ -n "$UNSTAGED_LOCKFILES" ]; then
    echo ""
    echo "   ‚ö†Ô∏è  Found unstaged package-lock.json changes:"
    echo "$UNSTAGED_LOCKFILES" | sed 's/^/     /'
    echo ""

    # Check if corresponding package.json files are staged
    CONFLICTING_PAIRS=""
    for UNSTAGED_LOCKFILE in $UNSTAGED_LOCKFILES; do
        LOCKFILE_DIR=$(dirname "$UNSTAGED_LOCKFILE")
        PACKAGE_JSON="$LOCKFILE_DIR/package.json"

        # Check if corresponding package.json is staged
        if echo "$STAGED_FILES" | grep -q "^$PACKAGE_JSON$"; then
            CONFLICTING_PAIRS="$CONFLICTING_PAIRS\n   - $PACKAGE_JSON (staged) ‚Üî $UNSTAGED_LOCKFILE (unstaged)"
        fi
    done

    if [ -n "$CONFLICTING_PAIRS" ]; then
        echo "   ‚ùå CRITICAL: Staged package.json with unstaged package-lock.json detected:"
        echo "$CONFLICTING_PAIRS"
        echo ""
        echo "   This creates an inconsistent dependency state!"
        echo "   package.json and package-lock.json must be committed together."
        echo ""
        echo "   To fix this, choose one option:"
        echo ""
        echo "   Option 1 - Stage the lockfiles (recommended):"
        for UNSTAGED_LOCKFILE in $UNSTAGED_LOCKFILES; do
            echo "   git add $UNSTAGED_LOCKFILE"
        done
        echo ""
        echo "   Option 2 - Unstage the package.json files:"
        for UNSTAGED_LOCKFILE in $UNSTAGED_LOCKFILES; do
            LOCKFILE_DIR=$(dirname "$UNSTAGED_LOCKFILE")
            PACKAGE_JSON="$LOCKFILE_DIR/package.json"
            if echo "$STAGED_FILES" | grep -q "^$PACKAGE_JSON$"; then
                echo "   git reset $PACKAGE_JSON"
            fi
        done
        echo ""
        echo "   Option 3 - Discard lockfile changes (if they're accidental):"
        for UNSTAGED_LOCKFILE in $UNSTAGED_LOCKFILES; do
            echo "   git checkout $UNSTAGED_LOCKFILE"
        done
        echo ""
        echo "‚ùå Commit cancelled - fix package.json/package-lock.json mismatch"
        exit 1
    fi

    # If no conflicting pairs, these might just be development artifacts
    echo "   These files have been modified but are not staged for commit."
    echo "   This might indicate:"
    echo "   - Accidental changes from Node.js version mismatch"
    echo "   - Local development artifacts"
    echo "   - Forgotten to stage legitimate changes"
    echo ""

    # Count lines in unstaged changes
    for UNSTAGED_LOCKFILE in $UNSTAGED_LOCKFILES; do
        UNSTAGED_CHANGES=$(git diff --numstat "$UNSTAGED_LOCKFILE" | cut -f1)
        if [ -n "$UNSTAGED_CHANGES" ] && [ "$UNSTAGED_CHANGES" -gt 50 ]; then
            echo "   üìä Large unstaged changes in $UNSTAGED_LOCKFILE: $UNSTAGED_CHANGES lines"
        fi
    done

    echo ""
    echo "   Since no package.json files are staged with these lockfiles,"
    echo "   you can safely proceed or clean them up."
    echo ""
    printf "   Continue with current staged files? (y/N): "



    if [ -t 0 ]; then
        read -r response
    else
        read -r response < /dev/tty
    fi

    if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
        echo ""
        echo "   To stage the lockfiles:"
        for UNSTAGED_LOCKFILE in $UNSTAGED_LOCKFILES; do
            echo "   git add $UNSTAGED_LOCKFILE"
        done
        echo ""
        echo "   Or to discard the changes:"
        for UNSTAGED_LOCKFILE in $UNSTAGED_LOCKFILES; do
            echo "   git checkout $UNSTAGED_LOCKFILE"
        done
        echo ""
        echo "‚ùå Commit cancelled"
        exit 1
    fi
fi

# Summary for lockfiles
if [ -z "$STAGED_LOCKFILES" ] && [ -z "$UNSTAGED_LOCKFILES" ]; then
    echo "   No package-lock.json changes detected"
fi


# 3. Run linting (only if we're in a directory with lint script)
echo "3Ô∏è‚É£ Checking for lint script..."

# Try to find nearest package.json with lint script
CURRENT_DIR=$(pwd)
LINT_DIR=""

# Check current directory and walk up to git root
while [ "$CURRENT_DIR" != "$GIT_ROOT" ] && [ "$CURRENT_DIR" != "/" ]; do
    if [ -f "$CURRENT_DIR/package.json" ] && grep -q '"lint"' "$CURRENT_DIR/package.json"; then
        LINT_DIR="$CURRENT_DIR"
        break
    fi
    CURRENT_DIR=$(dirname "$CURRENT_DIR")
done

# Check git root as well
if [ -z "$LINT_DIR" ] && [ -f "$GIT_ROOT/package.json" ] && grep -q '"lint"' "$GIT_ROOT/package.json"; then
    LINT_DIR="$GIT_ROOT"
fi

if [ -n "$LINT_DIR" ]; then
    echo "   Found lint script in: $LINT_DIR"
    echo "   Running linter..."
    cd "$LINT_DIR"
    npm run lint
    echo "   ‚úÖ Linting passed"
else
    echo "   No lint script found, skipping"
fi

echo ""
echo "‚úÖ All pre-commit checks passed!"
echo ""
